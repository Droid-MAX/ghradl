#!/usr/bin/env bash

# ghradl - Github Release Asset Downloader

# Depends on jq https://stedolan.github.io/jq/

usage() {
  cat >&2 << EOH
ghradl - Github Release Asset Downloader

Usage:
  ghradl [-r <tag> | -a <assets> | -o <dir> | -t <token> | -f] <user> <repository>
  ghradl -l [(-A | -r <tag>) | -a <assets> | -t <token> | -J] <user> <repository>
  ghradl -A [-t <token> | -J] <user> <repository>
  ghradl -h

Options:
  -h        Prints this message.
  -l        List release assets.
  -A        List all releases.
  -J        Print JSON when listing releases or assets [default: false].
  -r TAG    Get a release by tag name [default: the latest release].
  -a REGEX  Get all assets matching asset name regexp [default: all release assets].
  -o DIR    Directory to download assets to [default: current working directory].
  -t TOKEN  Github API token [default: no token] (https://github.com/settings/tokens).
  -f        Overwrite any existing downloaded assets [default: false].
  -v        Verbose output [default: false].
EOH
}

echoError() {
  echo "$@" >&2
}

echoVerbose() {
  if [ "$verbose" = true ]
  then
    echoError "$@"
  fi
}

repeatedOpt() {
  usage
  echoError
  echoError "Please provide the -$1 option only once."
  exit 1
}

allOrTag() {
  usage
  echoError
  echoError "Getting a release by tag '-r $1' and listing releases with '-A' cannot be done together."
  exit 1
}

jqFilter() {
  json="$1"
  filter="$2"
  shift 2
  echo "$json" | jq --raw-output $@ "$filter"
}

jqFilterCompact() {
  jqFilter "$1" "$2" -c
}

listAssets=false
listReleases=false
printJson=false
forceDownload=false
verbose=false

while getopts ":hlAJa:r:o:t:fv" opt; do
  case $opt in
    l)
      if [ "$listAssets" = true ]; then repeatedOpt "l"; fi
      listAssets=true
      ;;
    A)
      if [ "$listReleases" = true ]; then repeatedOpt "A"; fi
      if [ -n "$tag" ]; then allOrTag "$tag"; fi
      listReleases=true
      ;;
    J)
      if [ "$printJson" = true ]; then repeatedOpt "J"; fi
      printJson=true
      ;;
    r)
      if [ -n "$tag" ]; then repeatedOpt "r"; fi
      if [ "$listReleases" = true ]; then allOrTag "$OPTARG"; fi
      tag="$OPTARG"
      ;;
    a)
      if [ -n "$assetRegex" ]; then repeatedOpt "a"; fi
      assetRegex="$OPTARG"
      ;;
    o)
      if [ -n "$outputDir" ]; then repeatedOpt "o"; fi
      outputDir="$OPTARG"
      ;;
    t)
      if [ -n "$token" ]; then repeatedOpt "t"; fi
      token="$OPTARG"
      ;;
    f)
      if [ "$forceDownload" = true ]; then repeatedOpt "f"; fi
      forceDownload=true
      ;;
    v)
      if [ "$verbose" = true ]; then repeatedOpt "v"; fi
      verbose=true
      ;;
    h)
      usage
      exit 0
      ;;
    :)
      usage
      echoError
      echoError "Option -$OPTARG requires an argument."
      exit 1
      ;;
    \?)
      usage
      echoError
      echoError "Invalid option -$OPTARG."
      exit 1
      ;;
  esac
done

if [[ "$listAssets" = true || "$listReleases" = true ]]
then
  if [ -n "$outputDir" ]
  then
    usage
    echoError
    echoError "The output directory option '-o $outputDir' is not applicable when listing releases or assets."
    exit 1
  fi

  if [ "$forceDownload" = true ]
  then
    usage
    echoError
    echoError "The overwrite downloads option '-f' is not applicable when listing releases or assets."
    exit 1
  fi
else
  # We are neither listing assets or releases
  if [ "$printJson" = true ]
  then
    usage
    echoError
    echoError "The print JSON option '-J' is only applicable when listing releases or assets."
    exit 1
  fi
fi

if [[ "$listReleases" = true && "$listAssets" = false ]]
then
  if [ -n "$assetRegex" ]
  then
    usage
    echoError
    echoError "The assets option '-a $assetRegex' is not applicable when listing releases without listing assets with '-l'."
    exit 1
  fi
fi

shift "$((OPTIND -1))"

user="$1"
repo="$2"

if [ -z "$user" ]
then
  usage
  echoError
  echoError "Please provide a user."
  exit 1
fi

if [ -z "$repo" ]
then
  usage
  echoError
  echoError "Please provide a repository."
  exit 1
fi

allAssets=".*"
assets="${assetRegex="$allAssets"}"
defaultOutputDir="."
outputDir="${outputDir="$defaultOutputDir"}"
auth="${token+"?access_token=$token"}"

if [ "$listReleases" = false ]
then
  release="${tag+"/tags/$tag"}"
  release="${release:=/latest}"
fi

echoVerbose "User: $1"
echoVerbose "Repo: $2"
echoVerbose "List assets: $listAssets"
echoVerbose "List releases: $listReleases"
echoVerbose "Tag: $tag"
echoVerbose "Assets: $assets"
echoVerbose "Output dir: $outputDir"
echoVerbose "Token: $token"
echoVerbose "Overwrite assets: $forceDownload"
echoVerbose "Release: $release"

releasesApi="https://api.github.com/repos/$user/$repo/releases"
releasesApiResponse="`curl --silent "$releasesApi$release$auth"`"

if [ -z "$releasesApiResponse" ]
then
  echoError "Could not connect to Github to get releases for user and repository '$user/$repo'. Are you connected to the internet?"
  exit 1
fi

releaseApiErrorMessage="`jqFilter "$releasesApiResponse" ".message?"`"

if [[ -n "$releaseApiErrorMessage" && "$releaseApiErrorMessage" != "null" ]]
then
  echoError "Could not get releases for user and repository '$user/$repo'."
  echoError
  echoError "Got error '$releaseApiErrorMessage'."
  exit 1
fi

releaseAssetsFilter() {
  filter="{name: .name, tag: .tag_name, assets: [.assets[] | select(.name | test(\"$1\")) |  {name: .name, url: .url}]}"

  if [ "$listReleases" = true ]
  then
    echo "[.[] | $filter]"
  else
    echo "$filter"
  fi
}

printJsonFilter() {
  if [ "$listAssets" = true ]
  then
    echo "."
  else
    echo "[.[] | {tag: .tag, name: .name}]"
  fi
}

releaseAssetsJson="`jqFilter "$releasesApiResponse" "$(releaseAssetsFilter "$assets")"`"

if [ "$printJson" = true ]
then
  jqFilter "$releaseAssetsJson" "`printJsonFilter`"
  exit 0
fi

if [ "$listReleases" = true ]
then
  listReleasesFilter="[]"
fi

while IFS= read -r
do
  releaseName="`jqFilter "$REPLY" ".name"`"
  releaseTag="`jqFilter "$REPLY" ".tag"`"

  if [[ "$listAssets" = true || "$listReleases" = true ]]
  then
    echo
    echo "Release: $releaseName"
    echo "Tag: $releaseTag"

    assetNames="`jqFilter "$REPLY" ".assets[].name"`"

    if [ "$listAssets" = true ]
    then
      if [ -z "$assetNames" ]
      then
        if [ -n "$assetRegex" ]
        then
          echo "Assets: (no assets match '$assetRegex')"
        else
          echo "Assets: (this release has no assets)"
        fi
      else
        echo "Assets:"
        echo "$assetNames"
      fi
    fi
  else
    while IFS= read -r
    do
      assetName="`jqFilter "$REPLY" ".name"`"
      assetUrl="`jqFilter "$REPLY" ".url"`"

      output="$outputDir/$assetName"

      echoVerbose
      echoVerbose "Downloading $assetName to $outputDir..."

      if [[ ! -e "$output" || "$forceDownload" = true ]]
      then
        # --location is needed to handle 302 redirects
        # See https://developer.github.com/v3/repos/releases/#get-a-single-release-asset

        curl --silent --location --create-dirs --output "$output" \
          -H 'Accept: application/octet-stream' "$assetUrl$auth"

        echoVerbose "Finished $assetName."
      else
        echoVerbose "Already exists. Moving on."
      fi
    done < <(jqFilterCompact "$REPLY" ".assets[]")
  fi
done < <(jqFilterCompact "$releaseAssetsJson" ".$listReleasesFilter")
